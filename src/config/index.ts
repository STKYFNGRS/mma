import { cookieStorage, createStorage, http } from 'wagmi';
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi';
import { mainnet, arbitrum } from '@reown/appkit/networks'; // Use Reown networks again

// Get Reown Project ID
export const projectId = process.env.NEXT_PUBLIC_PROJECT_ID;
// Get Infura API Key
const infuraApiKey = process.env.NEXT_PUBLIC_INFURA_API_KEY;

if (!projectId) {
  throw new Error('NEXT_PUBLIC_PROJECT_ID is not defined in .env.local');
}
if (!infuraApiKey) {
  throw new Error('NEXT_PUBLIC_INFURA_API_KEY is not defined in .env.local');
}

// Define the networks array (let type be inferred)
export const networks = [mainnet, arbitrum];

// Define transports for each network using Infura
const transports = {
  [mainnet.id]: http(`https://mainnet.infura.io/v3/${infuraApiKey}`),
  [arbitrum.id]: http(`https://arbitrum-mainnet.infura.io/v3/${infuraApiKey}`),
};

// Set up the Wagmi Adapter again
export const wagmiAdapter = new WagmiAdapter({
  storage: createStorage({
    storage: cookieStorage
  }),
  ssr: true,
  projectId,
  networks,
  transports: transports, // Use Infura transports
});

// Export the underlying wagmi config generated by the adapter
export const config = wagmiAdapter.wagmiConfig; 